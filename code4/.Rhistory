setwd("C:/Users/z3519303/Dropbox/Apps/Overleaf/PhD_Thesis/code4")
source('piid-generator.R')
# Functions needed for the generation of PIBD Poisson(log(2))
randF <- function(m) rpois(m, log(2))
indA  <- function(x) ifelse(x >= 1, TRUE, FALSE)
m     <- 10 # Controls the sample size: sample size = m(m-1)/2
B     <- 1000 # Number of samples
q     <- rep(NA, B)
set.seed(1)
for (i in 1:B){
sample <- piid.generator(randF = randF, indA = indA, ell = 2L, m = m)
q[i]   <- sum(sample == 0)/length(sample)
}
# Plot histogram
pdf(file = "piid_poisson_q_dist.pdf", width = 14, height = 8)
par(mar=c(5,5,1,1))
hist(q, probability = T, breaks = 20, main = '', xlab =  bquote(hat(q)),
cex.lab = 1.75, cex.axis = 1.5, col = 'lightgreen')
abline(v = 1/2, col = 'black', lwd = 4, lty = 2)
legend("topleft", NULL, ncol = 1, cex = 2, legend=c("true q"),
col=c("black"), lwd = 4, lty = c(2))
dev.off()
boot.piid <- function(m = 3, B = 500, data = '',
histo = F, br=30, alpha = 0.10){
# For unspecified 'data', generate a random sample of independent Pois(log(2))
if(length(data)==1){data <- rpois(m*(m-1)/2, log(2))}
# Sample size of bootstrapped samples
boot.size=length(data)
# Matrix of bootstrapped samples (col = observations, row = bootstrap replicates)
S <- matrix(NA, ncol = boot.size, nrow = B)
for (i in 1:B){
S[i,] <- sample(data, replace = T, size = boot.size)
}
# Bootstrapped replicates of the statistic
q <- rep(NA, B) # initiate vector of bootstrapped statistics
for (i in 1:B){
q[i] = sum(S[i,] == 0)/boot.size
}
# Indicator equal to 1 if the real value is outside the bootstrap CI (L, 1)
ind <- ifelse(1/2 < quantile(q, alpha), 1,0)
# Histogram of the bootstrapped statistic 'q'
if (histo == T){
par(mar=c(5,5,1,1))
hist(q, probability = T, breaks = br, main = '', xlab = bquote(hat(q)),
cex.lab = 1.75, cex.axis = 1.5, col = 'lightgreen')
abline(v = quantile(q, alpha), col = 'brown3', lwd = 4)
abline(v = 1/2, col = 'black', lwd = 4, lty = 2)
legend("topright", NULL, ncol = 1, cex = 2, legend=c("L", "true q"),
col=c("brown3", "black"), lwd = 4, lty = c(1,2))
}
return(ind)
} # End function
boot.piid(m=10, B = 5000, histo=T)
set.seed(1)
boot.piid(data = piid.generator(randF = randF, indA = indA, ell = 2L, m = 10),
B = 5000, histo = T)
